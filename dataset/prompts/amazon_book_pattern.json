{
    "instruction": "Assuming you are a professional book critic, your task is to help user find books they want to read next based on their interests. To effectively recommend books, you should follow three steps: Thought, Action, Observation. During the Thought step, your objective is to consider how to make the final book list match the user's perference, and decide the best course of action. If the book list is good enough or no better action, you will finish early with the candidate book list.\n For the Action step, you have three options: \n Retrieve[attribute, $K]: Retrieve the top $K books with the Recommender system/LLM based on a specific attribute. The retrieve attribute coule be one of the (None, price, sales_rank).\n Rerank[attribute, $K]: Return the most suitable top $K reranked books in descending order based on retrieved book list and user history. The rerank action is used to organize the retrieved books and is usually executed before Finish. The rerank attribute could be anything you think might help(e.g., None, genre, price, popularity, reputation, etc).\n Finish[list]: Return the candidate books list and complete the task. If the final length of the book list is smaller than our task, you should add the user's suitable retrieved books to pad the Finish list. Please don't contain the user's historical books.\n To make recommendations, you'll need to use the user's historical records of books reading, include the book name, price, sales_rank, and the user's rating out of 5. As for User History, the most recently read book is the last book.\n",
    "task": "Task: Top 10 books.\n",
    "user_pattern": "User History: ",
    "item_pattern": "ID {iid}, {name}, price is {price}, book sales ranking is {rank}, ",
    "score_pattern": "{score} stars.\n",
    "knowledge_instruction": "Assuming you are an online book recommender with access to various data such as genre, price, popularity, and reputation, etc. your task is to reorganize the given books list. The CRS is conventional recommender system, and LLM means large Language model. Please think step by step. As for User History, the most recently read book is the last book.\n",
    "crs_k": "Here are the top {topK} book ID, book title, and the recommendation confidence score from the recommender system with {attribute} type.\n```{rec_list}```\n",
    "rerank_k": "Here are the top {topK} book ID, book title, and the rerank confidence score from the reranking with {attribute} type. \n```{rec_list}```\n",
    "rerank_output": "Please rerank the above {before_topK} recommended books by measuring the possibilities that user would like to read next most according to the {rerank_type} attribute and the given book history records, and output top **{after_topK}** books except user's historical books. Please only output the book ID, book title and the rerank confidence score after ranking.\nOutput:\n",
    "rerank_default": "Please rerank the above {before_topK} books by measuring the possibilities that user would like to read next most, according to the given book history records, and output top **{after_topK}** books except user's historical books. Please only output the book ID, book title and the rerank confidence score after ranking.\nOutput:\n",
    "knowledge_instruction_2": "Assuming you are an online book recommender with access to various data such as genre, price, popularity, and reputation, your task is to reorganize the given books list. As for User History, the most recently read book is the last book.\n",
    "rerank_default_2": "Please rerank the above {before_topK} books by measuring the possibilities that user would like to read next most, according to the user history. Please think step by step. Please select top **{after_topK}** books except user's historical books, don't contain any text explanation. Please only output the book ID, book title and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, e.g., ```<9>, Water For Elephants, 9.5\n<15>, Red Mars, 8.8\n```, {after_topK} books in all.\nOutput:\n",
    "rerank_output_2": "Please rerank the above {before_topK} books by measuring the possibilities that user would like to read next most, according to the user history and the {rerank_type} attribute. Please think step by step. Please select top **{after_topK}** books except user's historical books, don't contain any text explanation. Please only output the book ID, book title and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, e.g., ```<9>, Water For Elephants, 9.5\n<15>, Red Mars, 8.8\n```, {after_topK} books in all.\nOutput:\n",
    "rerank_remin": "I've read the following books in the past in order:\n {user_history}\n\n Now there are {before_topK} candidate books that I can read next:\n{candidate_items} \n Please rank these {before_topK} books by measuring the possibilities that I would like to read next most, according to my reading history. Please think step by step.\n Note that my most recently read book is {recent_item}. Please output your top ranking **{after_topK}** results with the structure in ```[<ID1>, Name1\n<ID2>, Name2, ...]```. Please don't contain any text explanation. You MUST rank the given candidate books. You can not generate books that are not in the given candidate list.\n Output:\n",
    "plan_task": "Task: Top 10 books.\nPlan:\n",
    "chatRec_instruction": "I want you to recommend book to a user based on some personal information and historical records of book reading.\nThe historical records includes the book ID, book name, price, sales_rank and how many points he/she scored out of 5. The higher the score, the more he likes the book. You are encouraged to learn his book prefereen from the books he have read.\n",
    "chatRec_rerank": "Here's a list of candidate books that he is likely to like: ```{candidate_list}```\nPlease select top **10** books in the list that is most likely to be liked except user's historical books.\nPlease only output the book ID, book name and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```[<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n]```.\nOutput:\n",
    "knowledge_instruction_sigir": "Assuming you are an online book recommender with access to various data such as genre, price, popularity, and reputation, your task is to reorganize the given books list. Please think step by step. As for User History, the most recently read book is the last book.\n",
    "rerank_sigir": "Please rerank the above books and output {after_topK} books by measuring the possibilities that user would like to read next most, according to the user history. Please think step by step. Please select top **{after_topK}** books except user's historical books, don't contain any text explanation. Please only output the book ID, book title and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, **{after_topK}** books in all.\nOutput:\n",
    "crs_sigir": "Here are the top {topK} book ID, book title and the recommendation confidence score from the recommender system.\n```{rec_list}```\n"
}