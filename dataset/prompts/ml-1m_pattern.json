{
    "instruction": "Assuming you are an online movie recommender, your task is to help user find movies they want to watch next based on their interests. To effectively recommend movies, you should follow three steps: Thought, Action, Observation. During the Thought step, your objective is to consider how to make the final movie list match the user's perference, and decide the best course of action. If the movie list is good enough or no better action, you will finish early with the candidate movie list.\n For the Action step, you have three options: \n Retrieve[attribute, $K]: Retrieve the top $K movies with the Recommender system based on a specific attribute. The retrieve attribute coule be one of the (None, genre, release_year). The `None` attribute means that the retrieved items are given directly without any attribute condition.\n Rerank[attribute, $K]: Return the most suitable top $K reranked movies in descending order based on retrieved movie list and user history. The rerank action is used to organize the retrieved movies and is usually executed before Finish. The rerank attribute could be anything you think might help (e.g., None, actors, directors, popularity, reputation, etc). The `None` attribute means that candidate items are ranked directly by measuring the possibility without imposing any attribute condition.\n Finish[list]: Return the candidate movie list and complete the task. If the final length of the movie list is smaller than our task, you should add the user's suitable retrieved movies to pad the Finish list. Please don't contain the user's historical movies.\n To make recommendations, you'll need to use the user's historical records of film watching, include the movie name, genre, ID, released year, and the user's rating out of 5. As for User History, the most recently watched movie is the last movie.\n",
    "think_only": "Assuming you are an online movie recommender, your task is think what's the most useful way to help user find top `10` movies they want to watch next based on their interests. To effectively recommend movies, you should follow three steps: Thought, Action, Observation. During the Thought step, your objective is to consider how to make the current movie list match the user's perference, and decide the best course of action. If the movie list is good enough or no better action, you will finish early with the candidate movie list.\n For the Action step, you have three options: \n ```Retrieve[attribute, $K]```: Retrieve the top $K movies with the Recommender system based on a specific attribute. The retrieve attribute should be **one** of the (`None`, `genre`, `release_year`). The `None` attribute means that the retrieved items are given directly without any attribute condition.\n ```Rerank[attribute, $K]```: Return the most suitable top $K reranked movies in descending order based on retrieved movie list and user history. The rerank action is used to organize the retrieved movies and is usually executed before Finish. The rerank attribute could be anything you think might help (e.g., `None`, `actors`, `directors`, `popularity`, `reputation`, etc). The `None` attribute means that candidate items are ranked directly by measuring the possibility without imposing any attribute condition.\n ```Finish[list]```: Return the candidate movie list and complete the task.\n To make recommendations, you'll need to use the user's historical records of film watching, include the movie name, genre, ID, released year, and the user's rating out of 5. As for User History, the most recently watched movie is the last movie.\n",
    "task": "Task: Top 10 movies.\n",
    "think_only_task": "Please think step by step. You need to provide ONE `Thought` and `Action` in the style of the provided examples.\n",
    "user_pattern": "User profile: The user is a {gender}, {gender_s} is {age} years old, and work as {occ}, {gender_o} zip code is {zc}.\nHistory: ",
    "item_pattern": "ID {iid}, {name} ({year}), genre is {genre}, ",
    "score_pattern": "{score} stars.\n",
    "gender": {"M": ["man", "he", "his"], "F": ["woman", "she", "her"]},
    "knowledge_instruction": "Assuming you are an online movie recommender with access to various movie data such as actors, directors, popularity, and reputation, your task is to reorganize the given list of movies. The CRS is conventional recommender system, and LLM means large Language model. Please think step by step. As for User History, the most recently watched movie is the last movie.\n",
    "knowledge_instruction_sigir": "Assuming you are an online movie recommender with access to various movie data such as actors, directors, popularity, and reputation, your task is to reorganize the given list of movies. Please think step by step. As for User History, the most recently watched movie is the last movie.\n",
    "crs_k": "Here are the top {topK} movie ID, movie name, and the recommendation confidence score from the recommender system with {attribute} attribute.\n```{rec_list}```\n",
    "crs_sigir": "Here are the top {topK} movie ID, movie name, and the recommendation confidence score from the recommender system.\n```{rec_list}```\n",
    "rerank_k": "Here are the top {topK} movie ID, movie name, and the rerank confidence score from the reranking with {attribute} attribute. \n```{rec_list}```\n",
    "rerank_output": "Please rerank the above {before_topK} recommended movies by measuring the possibilities that user would like to watch next most according to the movie {rerank_type} attribute and the given movie history records, and output top **{after_topK}** movies except user's historical movies. Please only output the movie ID, movie name and the rerank confidence score after ranking.\nOutput:\n",
    "rerank_default": "Please rerank the above {before_topK} movies by measuring the possibilities that user would like to watch next most, according to the given movie history records, and output top **{after_topK}** movies except user's historical movies. Please only output the movie ID, movie name and the rerank confidence score after ranking.\nOutput:\n",
    "rerank_tool_chain": "Please rerank the above movies by measuring the possibilities that user would like to watch next most, according to the user movie history records, and output top **{after_topK}** movies except user's historical movies. Please only output the movie ID, movie name and the rerank confidence score after ranking.\nOutput:\n",

    "knowledge_instruction_2": "Assuming you are an online movie recommender with access to various movie data such as actors, directors, popularity, and reputation, your task is to reorganize the given list of movies. The `None` attribute means that the candidate items are given without any attribute condition. As for User History, the most recently watched movie is the last movie.\n",
    "rerank_sigir": "Please rerank the above movies and output {after_topK} movies by measuring the possibilities that user would like to watch next most, according to the user history. Please think step by step. Please select top **{after_topK}** movies list except user's historical movies, don't contain any text explanation. Please only output the movie ID, movie name and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, **{after_topK}** movies in all.\nOutput:\n",
    "rerank_default_2": "Please rerank the above {before_topK} movies by measuring the possibilities that user would like to watch next most, according to the user history. Please think step by step. Please select top **{after_topK}** movies list except user's historical movies, don't contain any text explanation. Please only output the movie ID, movie name and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, e.g., ```<4>, Waiting to Exhale, 9.5\n<16>, Casino, 8.7\n```, {after_topK} movies in all.\nOutput:\n",
    "rerank_output_2": "Please rerank the above {before_topK} movies by measuring the possibilities that user would like to watch next most, according to the user history and the {rerank_type} attribute. Please think step by step. Please select top **{after_topK}** movies list except user's historical movies, don't contain any text explanation. Please only output the movie ID, movie name and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, e.g., ```<4>, Waiting to Exhale, 9.5\n<16>, Casino, 8.7\n```, {after_topK} movies in all.\nOutput:\n",
    "rerank_remin": "I've watched t`he following movies in the past in order:\n {user_history}\n\n Now there are {before_topK} candidate movies that I can watch next:\n{candidate_items} \n Please rank these {before_topK} movies by measuring the possibilities that I would like to watch next most, according to my watching history. Please think step by step.\n Note that my most recently watched movie is {recent_item}. Please output your top ranking **{after_topK}** results with the structure in ```[<ID1>, Name1\n<ID2>, Name2, ...]```. Please don't contain any text explanation. You MUST rank the given candidate movies. You can not generate movies that are not in the given candidate list.\n Output:\n",

    "plan_task": "Task: Top 10 movies.\nPlan:\n",
    "chatRec_instruction": "I want you to recommend movie to a user based on some personal information and historical records of film watching.\nThe historical records includes the movie ID, movie name, release year, movie genre and how many points he/she scored out of 5. The higher the score, the more he likes the movie. You are encouraged to learn his movie prefereen from the movies he have watched.\n",
    "chatRec_rerank": "Here's a list of candidate movies that he is likely to like: ```{candidate_list}```\nPlease select top **10** movies in the list that is most likely to be liked except user's historical movies.\nPlease only output the movie ID, movie name and the rerank confidence score after ranking and don't contain any introduction or description, the output structure needs to be consistent with ```<ID_1>, Name1, score1\n<ID_2>, Name2, score2\n ... <ID_10>, Name1, score1\n```, e.g., ```<4>, Waiting to Exhale, 9.5\n<16>, Casino, 8.7\n```, 10 movies in all.\nOutput:\n"
}
